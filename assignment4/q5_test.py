# -*- coding: utf-8 -*-
"""Q5_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19fLBYgrxvEcH2qfm0URlFaLuEUyLMibB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import os.path
from os import path

if not path.exists('Plots/Question5/'):
    os.makedirs('Plots/Question5/')

end_points=[90,150,200,300,1000]
shapes=[]

for end_point in end_points:
    x = np.array([i*np.pi/180 for i in range(60,end_point,2)])
    y = 3*x + 8 + np.random.normal(0,3,len(x))
    shapes.append("N = "+str(len(x)))
    #Preprocess the input using the polynomial features
    #Solve the resulting linear regression problem by calling any one of the 
    #algorithms you have implemented.
    degrees=[1,3,5,7,9]
    theta_norms=[]
    for degree in degrees:
        PF = PolynomialFeatures(degree=degree)
        X = PF.transform(x)

        LR = LinearRegression(fit_intercept=True)
        LR.fit_normal_equations(pd.DataFrame(X), y)

        theta_norm=np.sqrt(np.square(LR.intercept_)+np.sum(np.square(LR.coef_)))
        theta_norms.append(theta_norm)

    plt.plot(degrees,np.log10(theta_norms),label=len(x))
plt.legend(shapes)
plt.xlabel('Degrees')
plt.ylabel('Theta Norm')
plt.show()