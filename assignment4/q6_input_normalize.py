# -*- coding: utf-8 -*-
"""Q6_input_normalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f7kCUuDOHfftApIrWG1t-OUn2FVdaxeV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import os.path
from os import path
from metrics import *
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

base_vals=np.array([i*np.pi/180 for i in range(60,300,2)])
X = pd.DataFrame(base_vals)
y = 3*(base_vals) + 8 + np.random.normal(0,3,len(X))

LR_ = LinearRegression(fit_intercept=True)
LR_.intercept_=0
LR_.coef_=np.zeros(X.shape[1])
LR_.fit_normal_equations(X, y)
#LR_.fit_gradient_descent(X.copy(),y.copy(), 30, 'manual', None, num_iters=50, lr=0.005)
y_hat = LR_.predict(X)

print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))

fig, (ax1, ax2) = plt.subplots(1, 2)

legend_arr=["y_true = o","y_predicted = +"]
ax1.plot(y_hat, 'b-')
ax1.plot(y, 'r+')
ax1.legend(legend_arr)
ax1.set_ylabel('y')
ax1.set_xlabel('Datapoint')

scaler = StandardScaler()
scaler.fit(X)
scaled_x=scaler.transform(X)
X = pd.DataFrame(np.squeeze(scaled_x))

y = np.expand_dims(y, axis=1)
scaler2 = StandardScaler()
scaler2.fit(y)
scaled_y=scaler.transform(y) 
y = np.squeeze(scaled_y)

LR_ = LinearRegression(fit_intercept=True)
LR_.intercept_=0
LR_.coef_=np.zeros(X.shape[1])
LR_.fit_normal_equations(X, y)
#LR_.fit_gradient_descent(X.copy(),y.copy(), 30, 'manual', None, num_iters=50, lr=0.005)
y_hat = LR_.predict(X)

print('Scaled RMSE: ', rmse(y_hat, y))
print('Scaled MAE: ', mae(y_hat, y))

ax2.plot(y_hat, 'b-')
ax2.plot(y, 'r+')
ax2.legend(legend_arr)
plt.ylabel('y')
plt.xlabel('Datapoint')

plt.show()